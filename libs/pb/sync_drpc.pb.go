// Code generated by protoc-gen-go-drpc. DO NOT EDIT.
// protoc-gen-go-drpc version: v0.0.34
// source: sync.proto

package pb

import (
	context "context"
	errors "errors"
	protojson "google.golang.org/protobuf/encoding/protojson"
	proto "google.golang.org/protobuf/proto"
	drpc "storj.io/drpc"
	drpcerr "storj.io/drpc/drpcerr"
)

type drpcEncoding_File_sync_proto struct{}

func (drpcEncoding_File_sync_proto) Marshal(msg drpc.Message) ([]byte, error) {
	return proto.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_sync_proto) MarshalAppend(buf []byte, msg drpc.Message) ([]byte, error) {
	return proto.MarshalOptions{}.MarshalAppend(buf, msg.(proto.Message))
}

func (drpcEncoding_File_sync_proto) Unmarshal(buf []byte, msg drpc.Message) error {
	return proto.Unmarshal(buf, msg.(proto.Message))
}

func (drpcEncoding_File_sync_proto) JSONMarshal(msg drpc.Message) ([]byte, error) {
	return protojson.Marshal(msg.(proto.Message))
}

func (drpcEncoding_File_sync_proto) JSONUnmarshal(buf []byte, msg drpc.Message) error {
	return protojson.Unmarshal(buf, msg.(proto.Message))
}

type DRPCSyncClient interface {
	DRPCConn() drpc.Conn

	GetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error)
	NotifyBlock(ctx context.Context, in *NotifyBlockRequest) (*NotifyBlockResponse, error)
	NotifyBlockID(ctx context.Context, in *NotifyBlockIDRequest) (*NotifyBlockIDResponse, error)
	NotifyTx(ctx context.Context, in *NotifyTxRequest) (*NotifyTxResponse, error)
	GetTxs(ctx context.Context, in *GetTxsRequest) (*GetTxsResponse, error)
	GetBlockByID(ctx context.Context, in *GetBlockByIDRequest) (*GetBlockByIDResponse, error)
	GetBlockIDByNumber(ctx context.Context, in *GetBlockIDByNumberRequest) (*GetBlockIDByNumberResponse, error)
	GetBlocksFromNumber(ctx context.Context, in *GetBlocksFromNumberRequest) (*GetBlocksFromNumberResponse, error)
}

type drpcSyncClient struct {
	cc drpc.Conn
}

func NewDRPCSyncClient(cc drpc.Conn) DRPCSyncClient {
	return &drpcSyncClient{cc}
}

func (c *drpcSyncClient) DRPCConn() drpc.Conn { return c.cc }

func (c *drpcSyncClient) GetStatus(ctx context.Context, in *GetStatusRequest) (*GetStatusResponse, error) {
	out := new(GetStatusResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/GetStatus", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) NotifyBlock(ctx context.Context, in *NotifyBlockRequest) (*NotifyBlockResponse, error) {
	out := new(NotifyBlockResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/NotifyBlock", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) NotifyBlockID(ctx context.Context, in *NotifyBlockIDRequest) (*NotifyBlockIDResponse, error) {
	out := new(NotifyBlockIDResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/NotifyBlockID", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) NotifyTx(ctx context.Context, in *NotifyTxRequest) (*NotifyTxResponse, error) {
	out := new(NotifyTxResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/NotifyTx", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) GetTxs(ctx context.Context, in *GetTxsRequest) (*GetTxsResponse, error) {
	out := new(GetTxsResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/GetTxs", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) GetBlockByID(ctx context.Context, in *GetBlockByIDRequest) (*GetBlockByIDResponse, error) {
	out := new(GetBlockByIDResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/GetBlockByID", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) GetBlockIDByNumber(ctx context.Context, in *GetBlockIDByNumberRequest) (*GetBlockIDByNumberResponse, error) {
	out := new(GetBlockIDByNumberResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/GetBlockIDByNumber", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *drpcSyncClient) GetBlocksFromNumber(ctx context.Context, in *GetBlocksFromNumberRequest) (*GetBlocksFromNumberResponse, error) {
	out := new(GetBlocksFromNumberResponse)
	err := c.cc.Invoke(ctx, "/pb.Sync/GetBlocksFromNumber", drpcEncoding_File_sync_proto{}, in, out)
	if err != nil {
		return nil, err
	}
	return out, nil
}

type DRPCSyncServer interface {
	GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error)
	NotifyBlock(context.Context, *NotifyBlockRequest) (*NotifyBlockResponse, error)
	NotifyBlockID(context.Context, *NotifyBlockIDRequest) (*NotifyBlockIDResponse, error)
	NotifyTx(context.Context, *NotifyTxRequest) (*NotifyTxResponse, error)
	GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error)
	GetBlockByID(context.Context, *GetBlockByIDRequest) (*GetBlockByIDResponse, error)
	GetBlockIDByNumber(context.Context, *GetBlockIDByNumberRequest) (*GetBlockIDByNumberResponse, error)
	GetBlocksFromNumber(context.Context, *GetBlocksFromNumberRequest) (*GetBlocksFromNumberResponse, error)
}

type DRPCSyncUnimplementedServer struct{}

func (s *DRPCSyncUnimplementedServer) GetStatus(context.Context, *GetStatusRequest) (*GetStatusResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) NotifyBlock(context.Context, *NotifyBlockRequest) (*NotifyBlockResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) NotifyBlockID(context.Context, *NotifyBlockIDRequest) (*NotifyBlockIDResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) NotifyTx(context.Context, *NotifyTxRequest) (*NotifyTxResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) GetTxs(context.Context, *GetTxsRequest) (*GetTxsResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) GetBlockByID(context.Context, *GetBlockByIDRequest) (*GetBlockByIDResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) GetBlockIDByNumber(context.Context, *GetBlockIDByNumberRequest) (*GetBlockIDByNumberResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

func (s *DRPCSyncUnimplementedServer) GetBlocksFromNumber(context.Context, *GetBlocksFromNumberRequest) (*GetBlocksFromNumberResponse, error) {
	return nil, drpcerr.WithCode(errors.New("Unimplemented"), drpcerr.Unimplemented)
}

type DRPCSyncDescription struct{}

func (DRPCSyncDescription) NumMethods() int { return 8 }

func (DRPCSyncDescription) Method(n int) (string, drpc.Encoding, drpc.Receiver, interface{}, bool) {
	switch n {
	case 0:
		return "/pb.Sync/GetStatus", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					GetStatus(
						ctx,
						in1.(*GetStatusRequest),
					)
			}, DRPCSyncServer.GetStatus, true
	case 1:
		return "/pb.Sync/NotifyBlock", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					NotifyBlock(
						ctx,
						in1.(*NotifyBlockRequest),
					)
			}, DRPCSyncServer.NotifyBlock, true
	case 2:
		return "/pb.Sync/NotifyBlockID", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					NotifyBlockID(
						ctx,
						in1.(*NotifyBlockIDRequest),
					)
			}, DRPCSyncServer.NotifyBlockID, true
	case 3:
		return "/pb.Sync/NotifyTx", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					NotifyTx(
						ctx,
						in1.(*NotifyTxRequest),
					)
			}, DRPCSyncServer.NotifyTx, true
	case 4:
		return "/pb.Sync/GetTxs", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					GetTxs(
						ctx,
						in1.(*GetTxsRequest),
					)
			}, DRPCSyncServer.GetTxs, true
	case 5:
		return "/pb.Sync/GetBlockByID", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					GetBlockByID(
						ctx,
						in1.(*GetBlockByIDRequest),
					)
			}, DRPCSyncServer.GetBlockByID, true
	case 6:
		return "/pb.Sync/GetBlockIDByNumber", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					GetBlockIDByNumber(
						ctx,
						in1.(*GetBlockIDByNumberRequest),
					)
			}, DRPCSyncServer.GetBlockIDByNumber, true
	case 7:
		return "/pb.Sync/GetBlocksFromNumber", drpcEncoding_File_sync_proto{},
			func(srv interface{}, ctx context.Context, in1, in2 interface{}) (drpc.Message, error) {
				return srv.(DRPCSyncServer).
					GetBlocksFromNumber(
						ctx,
						in1.(*GetBlocksFromNumberRequest),
					)
			}, DRPCSyncServer.GetBlocksFromNumber, true
	default:
		return "", nil, nil, nil, false
	}
}

func DRPCRegisterSync(mux drpc.Mux, impl DRPCSyncServer) error {
	return mux.Register(impl, DRPCSyncDescription{})
}

type DRPCSync_GetStatusStream interface {
	drpc.Stream
	SendAndClose(*GetStatusResponse) error
}

type drpcSync_GetStatusStream struct {
	drpc.Stream
}

func (x *drpcSync_GetStatusStream) SendAndClose(m *GetStatusResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_NotifyBlockStream interface {
	drpc.Stream
	SendAndClose(*NotifyBlockResponse) error
}

type drpcSync_NotifyBlockStream struct {
	drpc.Stream
}

func (x *drpcSync_NotifyBlockStream) SendAndClose(m *NotifyBlockResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_NotifyBlockIDStream interface {
	drpc.Stream
	SendAndClose(*NotifyBlockIDResponse) error
}

type drpcSync_NotifyBlockIDStream struct {
	drpc.Stream
}

func (x *drpcSync_NotifyBlockIDStream) SendAndClose(m *NotifyBlockIDResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_NotifyTxStream interface {
	drpc.Stream
	SendAndClose(*NotifyTxResponse) error
}

type drpcSync_NotifyTxStream struct {
	drpc.Stream
}

func (x *drpcSync_NotifyTxStream) SendAndClose(m *NotifyTxResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_GetTxsStream interface {
	drpc.Stream
	SendAndClose(*GetTxsResponse) error
}

type drpcSync_GetTxsStream struct {
	drpc.Stream
}

func (x *drpcSync_GetTxsStream) SendAndClose(m *GetTxsResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_GetBlockByIDStream interface {
	drpc.Stream
	SendAndClose(*GetBlockByIDResponse) error
}

type drpcSync_GetBlockByIDStream struct {
	drpc.Stream
}

func (x *drpcSync_GetBlockByIDStream) SendAndClose(m *GetBlockByIDResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_GetBlockIDByNumberStream interface {
	drpc.Stream
	SendAndClose(*GetBlockIDByNumberResponse) error
}

type drpcSync_GetBlockIDByNumberStream struct {
	drpc.Stream
}

func (x *drpcSync_GetBlockIDByNumberStream) SendAndClose(m *GetBlockIDByNumberResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}

type DRPCSync_GetBlocksFromNumberStream interface {
	drpc.Stream
	SendAndClose(*GetBlocksFromNumberResponse) error
}

type drpcSync_GetBlocksFromNumberStream struct {
	drpc.Stream
}

func (x *drpcSync_GetBlocksFromNumberStream) SendAndClose(m *GetBlocksFromNumberResponse) error {
	if err := x.MsgSend(m, drpcEncoding_File_sync_proto{}); err != nil {
		return err
	}
	return x.CloseSend()
}
